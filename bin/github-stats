#!/usr/bin/env node

// Dependencies
var GitHubStats = require("../lib")
  , Clp = require("clp")
  , Package = require("../package")
  , Logger = require("bug-killer")
  ;

// Create options and add them
var userOption = new Clp.Option(["u", "user"], "The GitHub user to get stats about.", "user")
  , repoOption = new Clp.Option(["r", "repo"], "The full repository name.", "repository")
  , tokenOption = new Clp.Option(["t", "token"], "GitHub access token to access private resources or to increase the rate limit.", "token")
  , noAnsiOption = new Clp.Option(["n", "no-ansi"], "Disable ansi styles.")
  , lightOption = new Clp.Option(["l", "light"], "Use the light theme.")
  , calOption = new Clp.Option(["c", "calendar"], "Show the calendar.")
  , userStatsOption = new Clp.Option(["us", "user-stats"], "Display user stats.")
  , repoStatsOption = new Clp.Option(["rs", "repo-stats"], "Display repository stats.")
  , parser = new Clp({
        name: "GitHub Stats"
      , version: Package.version
      , process: true
      , exe: Package.name
      , examples: [
            "gh-stats -u IonicaBizau -r gh-stats --us --rs -c # Show everything"
          , "gh-stats -u IonicaBizau # Show the calendar"
          , "gh-stats -r IonicaBizau/git-stats # Repository stats"
        ]
      , docs_url: "https://github.com/IonicaBizau/gh-stats"
    }, [
        userOption, repoOption, noAnsiOption
      , lightOption, calOption, userStatsOption
      , repoStatsOption, tokenOption
    ])
  , stats = null
  ;

if (!repoStatsOption.is_provided && !userStatsOption.is_provided) {
    if (repoOption.value) {
        repoStatsOption.is_provided = true;
    } else if (userOption.value) {
        userStatsOption.is_provided = true;
        calOption.is_provided = true;
    }
}

// Create the GitHubStats instance
stats = new GitHubStats({
    theme: noAnsiOption.is_provided
    ? null : (lightOption.is_provided
    ? "LIGHT" : "DARK")
  , repo: repoOption.value
  , user: userOption.value
  , s_repo: repoStatsOption.is_provided
  , s_user: userStatsOption.is_provided
  , cal: calOption.is_provided
  , token: tokenOption.value
});


if (!userOption.is_provided && !repoOption.is_provided) {
    return console.log(parser.displayHelp());
}

Logger.log("Fetching data...", "info");
stats.toString(function (err, output, warns) {
    if (err) { return Logger.log(err, "error"); }
    if (warns.length) {
        warns.forEach(function (c) {
            Logger.log(c, "warn");
        });
    }
    if (!output || !output.trim()) {
        return console.log(parser.displayHelp());
    }
    console.log(output);
});
